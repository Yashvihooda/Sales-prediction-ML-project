# -*- coding: utf-8 -*-
"""SalesPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mUOAWEanGKKmOs4HQHpFYIBWlWh7FQBi
"""

import pandas as pd

# Load dataset
file_path = "/content/Copy of advertising_sales_data.xlsx"  # Replace with actual file path
df = pd.read_excel(file_path)

# Drop 'Campaign' column as it's not needed
df = df.drop(columns=['Campaign'], errors='ignore')

# Handle missing values in 'Radio' by filling with median
df['Radio'].fillna(df['Radio'].median(), inplace=True)

# Display first few rows to verify data
print(df.head())

# 1. Average amount spent on TV advertising
average_tv_spending = df["TV"].mean()
print(f"1. Average TV advertising expenditure: ${average_tv_spending:.2f}")

# 2. Correlation between Radio advertising and Sales
correlation_radio_sales = df[['Radio', 'Sales']].corr().iloc[0, 1]
print(f"2. Correlation between Radio advertising and Sales: {correlation_radio_sales:.2f}")

# Compute the correlation matrix
correlation_matrix = df[['TV', 'Radio', 'Newspaper', 'Sales']].corr()

# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

# Extract correlation of each advertising medium with Sales
correlations = correlation_matrix['Sales'].drop('Sales')

# Find the highest impact advertising medium
highest_impact_medium = correlations.idxmax()
highest_impact_value = correlations.max()

# Print the advertising medium with the highest impact
print(f"\nThe highest impact advertising medium is {highest_impact_medium} with correlation {highest_impact_value:.2f}")

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Define features and target variable
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Visualization: Actual vs Predicted Sales
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales (Multiple Linear Regression)")
plt.show()

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared Score (R²): {r2:.2f}")

import numpy as np

# Predict sales for TV=$200, Radio=$40, Newspaper=$50
new_data = np.array([[200, 40, 50]])  # New advertising values
predicted_sales = model.predict(new_data)[0]

print(f"5. Predicted Sales for TV=$200, Radio=$40, Newspaper=$50: {predicted_sales:.2f} units")

from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# Normalize the dataset
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split after normalization
X_train_scaled, X_test_scaled, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train model on normalized data
model_scaled = LinearRegression()
model_scaled.fit(X_train_scaled, y_train)

# Predictions with normalized model
y_pred_scaled = model_scaled.predict(X_test_scaled)

# Performance comparison
mse_original = mean_squared_error(y_test, y_pred)
mse_scaled = mean_squared_error(y_test, y_pred_scaled)
r2_original = r2_score(y_test, y_pred)
r2_scaled = r2_score(y_test, y_pred_scaled)

print(f"6. Model Performance Comparison:")
print(f"   - Original MSE: {mse_original:.2f}, R²: {r2_original:.2f}")
print(f"   - Normalized MSE: {mse_scaled:.2f}, R²: {r2_scaled:.2f}")

# Define new feature set with only Radio and Newspaper
X_limited = df[['Radio', 'Newspaper']]

# Train-test split
X_train_limited, X_test_limited, y_train, y_test = train_test_split(X_limited, y, test_size=0.2, random_state=42)

# Train model
model_limited = LinearRegression()
model_limited.fit(X_train_limited, y_train)

# Predictions
y_pred_limited = model_limited.predict(X_test_limited)

# Performance metrics
mse_limited = mean_squared_error(y_test, y_pred_limited)
r2_limited = r2_score(y_test, y_pred_limited)

print(f"7. Impact of using only Radio and Newspaper:")
print(f"   - MSE: {mse_limited:.2f}, R²: {r2_limited:.2f}")